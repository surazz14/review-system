{"ast":null,"code":"import axios from \"axios\";\nexport const axiosInstance = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  headers: {\n    Origin: \"*\",\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n});\n\nconst serverRequest = (method = \"POST\") => url => async (data, options = {\n  params: {},\n  withResponseHeader: false,\n  withResponseComplete: false\n}) => {\n  const query = {\n    method,\n    url,\n    data\n  };\n\n  if (options.params) {\n    query.params = options.params;\n  }\n\n  let extras = {};\n\n  if (options.contentType) {\n    extras.contentType = options.contentType || \"application/json\";\n  }\n\n  try {\n    let result = await axiosInstance(query);\n\n    if (options.withResponseComplete) {\n      return result;\n    }\n\n    if (options.withResponseHeader) {\n      return {\n        headers: { ...result.headers,\n          status: result.status\n        },\n        ...result.data\n      };\n    }\n\n    return result.data;\n  } catch (error) {\n    throw error.response;\n  }\n};\n\nexport const getRequest = serverRequest(\"GET\");\nexport const postRequest = serverRequest(\"POST\");\nexport const putRequest = serverRequest(\"PUT\");\nexport const deleteRequest = serverRequest(\"DELETE\");\nexport default serverRequest;","map":{"version":3,"sources":["/Users/suraj/project/paypay/review-system/review-system-client/src/common/utility/serverCall.js"],"names":["axios","axiosInstance","create","baseURL","headers","Origin","Accept","serverRequest","method","url","data","options","params","withResponseHeader","withResponseComplete","query","extras","contentType","result","status","error","response","getRequest","postRequest","putRequest","deleteRequest"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAa;AACxCC,EAAAA,OAAO,EAAE,2BAD+B;AAExCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE,GADD;AAEPC,IAAAA,MAAM,EAAE,kBAFD;AAGP,oBAAgB;AAHT;AAF+B,CAAb,CAAtB;;AASP,MAAMC,aAAa,GAAG,CAACC,MAAM,GAAG,MAAV,KAAsBC,GAAD,IAAS,OAClDC,IADkD,EAElDC,OAAO,GAAG;AACRC,EAAAA,MAAM,EAAE,EADA;AAERC,EAAAA,kBAAkB,EAAE,KAFZ;AAGRC,EAAAA,oBAAoB,EAAE;AAHd,CAFwC,KAO/C;AACH,QAAMC,KAAK,GAAG;AACZP,IAAAA,MADY;AAEZC,IAAAA,GAFY;AAGZC,IAAAA;AAHY,GAAd;;AAKA,MAAIC,OAAO,CAACC,MAAZ,EAAoB;AAClBG,IAAAA,KAAK,CAACH,MAAN,GAAeD,OAAO,CAACC,MAAvB;AACD;;AAED,MAAII,MAAM,GAAG,EAAb;;AAEA,MAAIL,OAAO,CAACM,WAAZ,EAAyB;AACvBD,IAAAA,MAAM,CAACC,WAAP,GAAqBN,OAAO,CAACM,WAAR,IAAuB,kBAA5C;AACD;;AAED,MAAI;AACF,QAAIC,MAAM,GAAG,MAAMjB,aAAa,CAACc,KAAD,CAAhC;;AACA,QAAIJ,OAAO,CAACG,oBAAZ,EAAkC;AAChC,aAAOI,MAAP;AACD;;AAED,QAAIP,OAAO,CAACE,kBAAZ,EAAgC;AAC9B,aAAO;AACLT,QAAAA,OAAO,EAAE,EACP,GAAGc,MAAM,CAACd,OADH;AAEPe,UAAAA,MAAM,EAAED,MAAM,CAACC;AAFR,SADJ;AAKL,WAAGD,MAAM,CAACR;AALL,OAAP;AAOD;;AACD,WAAOQ,MAAM,CAACR,IAAd;AACD,GAhBD,CAgBE,OAAOU,KAAP,EAAc;AACd,UAAMA,KAAK,CAACC,QAAZ;AACD;AACF,CA1CD;;AA4CA,OAAO,MAAMC,UAAU,GAAGf,aAAa,CAAC,KAAD,CAAhC;AACP,OAAO,MAAMgB,WAAW,GAAGhB,aAAa,CAAC,MAAD,CAAjC;AACP,OAAO,MAAMiB,UAAU,GAAGjB,aAAa,CAAC,KAAD,CAAhC;AACP,OAAO,MAAMkB,aAAa,GAAGlB,aAAa,CAAC,QAAD,CAAnC;AAEP,eAAeA,aAAf","sourcesContent":["import axios from \"axios\";\n\nexport const axiosInstance = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  headers: {\n    Origin: \"*\",\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nconst serverRequest = (method = \"POST\") => (url) => async (\n  data,\n  options = {\n    params: {},\n    withResponseHeader: false,\n    withResponseComplete: false,\n  }\n) => {\n  const query = {\n    method,\n    url,\n    data,\n  };\n  if (options.params) {\n    query.params = options.params;\n  }\n\n  let extras = {};\n      \n  if (options.contentType) {\n    extras.contentType = options.contentType || \"application/json\";\n  }\n\n  try {\n    let result = await axiosInstance(query);\n    if (options.withResponseComplete) {\n      return result;\n    }\n\n    if (options.withResponseHeader) {\n      return {\n        headers: {\n          ...result.headers,\n          status: result.status,\n        },\n        ...result.data,\n      };\n    }\n    return result.data;\n  } catch (error) {\n    throw error.response;\n  }\n};\n\nexport const getRequest = serverRequest(\"GET\");\nexport const postRequest = serverRequest(\"POST\");\nexport const putRequest = serverRequest(\"PUT\");\nexport const deleteRequest = serverRequest(\"DELETE\");\n\nexport default serverRequest;\n"]},"metadata":{},"sourceType":"module"}