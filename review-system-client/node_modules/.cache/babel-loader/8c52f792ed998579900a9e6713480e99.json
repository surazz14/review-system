{"ast":null,"code":"import { types, flow } from \"mobx-state-tree\";\nimport generalAction from \"../generalActions\";\nimport Member from \"./member\";\nimport Store from \"../setUpStore\";\nconst collection = types.model(\"members\", {\n  members: types.optional(types.array(Member), [])\n}).actions(generalAction).actions(self => ({\n  getAllMember: flow(function* () {\n    try {\n      const response = yield self.getRequest(\"/user\")();\n      self.members = response.users;\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  }),\n  addMember: flow(function* (member) {\n    try {\n      const response = yield self.postRequest(\"/user\")(member);\n      self.members = response.users;\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  }),\n  assignMember: flow(function* (currentMember, selectedMembers) {\n    try {\n      const payload = {\n        assigned: selectedMembers.map(member => member._id)\n      };\n      const response = yield self.putRequest(`/user/assign/${currentMember._id}`)(payload);\n      self.members = response.users;\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  }),\n  editMember: flow(function* (member, _id) {\n    try {\n      const response = yield self.putRequest(`/user/${_id}`)(member);\n      self.members = response.users;\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  }),\n  deleteMember: flow(function* (_id) {\n    try {\n      const response = yield self.deleteRequest(`/user/${_id}`)();\n      self.members = response.users;\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  })\n})).views(self => ({\n  normalizedAssignedUser(memberIds) {\n    const members = [];\n    memberIds.forEach(_id => {\n      const member = self.members.find(member => member._id === _id);\n\n      if (member) {\n        members.push(member);\n      }\n    });\n    return members;\n  },\n\n  get membersExceptMe() {\n    return self.members.filter(member => member._id !== Store.user._id);\n  },\n\n  membersExcept(_id, members) {\n    return members.filter(member => member._id !== _id);\n  }\n\n}));\nexport default collection;","map":{"version":3,"sources":["/Users/suraj/project/paypay/review-system/review-system-client/src/entities/member/memberCollection.ts"],"names":["types","flow","generalAction","Member","Store","collection","model","members","optional","array","actions","self","getAllMember","response","getRequest","users","e","addMember","member","postRequest","assignMember","currentMember","selectedMembers","payload","assigned","map","_id","putRequest","editMember","deleteMember","deleteRequest","views","normalizedAssignedUser","memberIds","forEach","find","push","membersExceptMe","filter","user","membersExcept"],"mappings":"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","sourcesContent":["import { types, flow } from \"mobx-state-tree\";\nimport generalAction from \"../generalActions\";\nimport Member from \"./member\";\nimport Store from \"../setUpStore\";\n\nconst collection = types\n  .model(\"members\", {\n    members: types.optional(types.array(Member), []),\n  })\n  .actions(generalAction)\n  .actions((self) => ({\n    getAllMember: flow(function* () {\n      try {\n        const response = yield self.getRequest(\"/user\")();\n        self.members = response.users;\n        return response;\n      } catch (e) {\n        throw e;\n      }\n    }),\n\n    addMember: flow(function* (member: any) {\n      try {\n        const response = yield self.postRequest(\"/user\")(member);\n        self.members = response.users;\n        return response;\n      } catch (e) {\n        throw e;\n      }\n    }),\n\n    assignMember: flow(function* (currentMember: any, selectedMembers: any) {\n      try {\n        const payload = {\n          assigned: selectedMembers.map((member: any) => member._id),\n        };\n        const response = yield self.putRequest(\n          `/user/assign/${currentMember._id}`\n        )(payload);\n        self.members = response.users;\n        return response;\n      } catch (e) {\n        throw e;\n      }\n    }),\n\n    editMember: flow(function* (member: any, _id: any) {\n      try {\n        const response = yield self.putRequest(`/user/${_id}`)(member);\n        self.members = response.users;\n        return response;\n      } catch (e) {\n        throw e;\n      }\n    }),\n\n    deleteMember: flow(function* (_id: any) {\n      try {\n        const response = yield self.deleteRequest(`/user/${_id}`)();\n        self.members = response.users;\n        return response;\n      } catch (e) {\n        throw e;\n      }\n    }),\n  }))\n\n  .views((self) => ({\n    normalizedAssignedUser(memberIds: any) {\n      const members: any = [];\n      memberIds.forEach((_id: string) => {\n        const member = self.members.find((member) => member._id === _id);\n        if (member) {\n          members.push(member);\n        }\n      });\n      return members;\n    },\n\n    get membersExceptMe() {\n      return self.members.filter((member) => member._id !== Store.user._id);\n    },\n\n    membersExcept(_id: string, members: any) {\n      return members.filter((member: any) => member._id !== _id);\n    },\n  }));\n\nexport default collection;\n"]},"metadata":{},"sourceType":"module"}