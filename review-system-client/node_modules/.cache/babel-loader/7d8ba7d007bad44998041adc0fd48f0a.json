{"ast":null,"code":"import { types, flow } from \"mobx-state-tree\";\nimport generalAction from \"../generalActions\";\nimport Review from \"./review\";\nimport Store from \"../setUpStore\";\nconst collection = types.model(\"Review\", {\n  reviews: types.optional(types.array(Review), [])\n}).actions(generalAction).actions(self => ({\n  getAllReview: flow(function* () {\n    const userId = Store.user._id;\n\n    try {\n      const response = yield self.getRequest(`/user/review/${userId}`)();\n      self.reviews = response.reviews;\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  }),\n  editFeedback: flow(function* (_id, feedback, member) {\n    const currentMember = self.reviews.find(data => data._id === _id);\n\n    try {\n      var _currentMember$assign, _currentMember$review;\n\n      const payload = {\n        assignedUser: currentMember === null || currentMember === void 0 ? void 0 : (_currentMember$assign = currentMember.assignedUser) === null || _currentMember$assign === void 0 ? void 0 : _currentMember$assign._id,\n        feedback: feedback,\n        reviewedBy: currentMember === null || currentMember === void 0 ? void 0 : (_currentMember$review = currentMember.reviewedBy) === null || _currentMember$review === void 0 ? void 0 : _currentMember$review._id\n      };\n      const response = yield self.putRequest(`/user/review/${_id}`)(payload);\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  }),\n  deleteMember: flow(function* (_id) {\n    try {\n      const response = yield self.deleteRequest(`/user/${_id}`)();\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  })\n})).views(self => ({\n  get normalizedReview() {\n    return self.reviews.map(review => {\n      var _review$assignedUser, _review$assignedUser2, _review$assignedUser3, _review$assignedUser4, _review$reviewedBy;\n\n      return {\n        _id: review._id,\n        feedback: review.feedback,\n        name: (_review$assignedUser = review.assignedUser) === null || _review$assignedUser === void 0 ? void 0 : _review$assignedUser.name,\n        email: (_review$assignedUser2 = review.assignedUser) === null || _review$assignedUser2 === void 0 ? void 0 : _review$assignedUser2.email,\n        address: (_review$assignedUser3 = review.assignedUser) === null || _review$assignedUser3 === void 0 ? void 0 : _review$assignedUser3.address,\n        position: (_review$assignedUser4 = review.assignedUser) === null || _review$assignedUser4 === void 0 ? void 0 : _review$assignedUser4.position,\n        reviewedBy: (_review$reviewedBy = review.reviewedBy) === null || _review$reviewedBy === void 0 ? void 0 : _review$reviewedBy.email\n      };\n    });\n  },\n\n  getReviewById(_id) {\n    self.reviews.find(reviewId => reviewId === _id);\n  }\n\n}));\nexport default collection;","map":{"version":3,"sources":["/Users/suraj/project/paypay/review-system/review-system-client/src/entities/review/reviewCollection.ts"],"names":["types","flow","generalAction","Review","Store","collection","model","reviews","optional","array","actions","self","getAllReview","userId","user","_id","response","getRequest","e","editFeedback","feedback","member","currentMember","find","data","payload","assignedUser","reviewedBy","putRequest","deleteMember","deleteRequest","views","normalizedReview","map","review","name","email","address","position","getReviewById","reviewId"],"mappings":"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","sourcesContent":["import { types, flow } from \"mobx-state-tree\";\nimport generalAction from \"../generalActions\";\nimport Review from \"./review\";\nimport Store from \"../setUpStore\";\nconst collection = types\n  .model(\"Review\", {\n    reviews: types.optional(types.array(Review), []),\n  })\n  .actions(generalAction)\n  .actions((self) => ({\n    getAllReview: flow(function* () {\n      const userId: string = Store.user._id;\n      try {\n        const response = yield self.getRequest(`/user/review/${userId}`)();\n        self.reviews = response.reviews;\n        return response;\n      } catch (e) {\n        throw e;\n      }\n    }),\n\n    editFeedback: flow(function* (_id: string, feedback: string, member: any) {\n      const currentMember = self.reviews.find((data: any) => data._id === _id);\n      try {\n        const payload: any = {\n          assignedUser: currentMember?.assignedUser?._id,\n          feedback: feedback,\n          reviewedBy: currentMember?.reviewedBy?._id,\n        };\n        const response = yield self.putRequest(`/user/review/${_id}`)(payload);\n        return response;\n      } catch (e) {\n        throw e;\n      }\n    }),\n\n    deleteMember: flow(function* (_id: any) {\n      try {\n        const response = yield self.deleteRequest(`/user/${_id}`)();\n        return response;\n      } catch (e) {\n        throw e;\n      }\n    }),\n  }))\n  \n  .views((self) => ({\n\n    get normalizedReview() {\n      return self.reviews.map((review) => ({\n        _id: review._id,\n        feedback: review.feedback,\n        name: review.assignedUser?.name,\n        email: review.assignedUser?.email,\n        address: review.assignedUser?.address,\n        position: review.assignedUser?.position,\n        reviewedBy: review.reviewedBy?.email\n      }));\n    },\n\n    getReviewById(_id: string) {\n      self.reviews.find((reviewId: any) => reviewId === _id);\n    },\n  }));\n\nexport default collection;\n"]},"metadata":{},"sourceType":"module"}